// ==================== BUG TRACKER FILE ====================
// ==================== DO NOT MODIFY ====================
// Error tracking
let errors = {};
for (let i = 1; i <= 15; i++) {
  errors[`error${i}`] = true;
}

const errorMessages = [
  "ReferenceError: undefinedVariable is not defined",
  "TypeError: Cannot read property 'name' of null",
  "SyntaxError: Missing parenthesis",
  "RangeError: Invalid array length -5",
  "TypeError: notAFunction is not a function",
  "ReferenceError: variableNotDeclared is not defined",
  "TypeError: undefined.someMethod is not a function",
  "SyntaxError: Unexpected token }",
  "TypeError: Assignment to constant variable",
  "TypeError: Cannot read property 'length' of undefined",
  "RangeError: Maximum call stack size exceeded",
  "TypeError: Cannot convert undefined to object",
  "SyntaxError: Unexpected token in JSON at position 5",
  "ReferenceError: Cannot access variable before initialization",
  "TypeError: Cannot read property 'valueOf' of undefined",
];

const solvedMessages = [
  "âœ… Variable properly declared and defined",
  "âœ… Null check implemented before property access",
  "âœ… Syntax corrected with proper parentheses",
  "âœ… Array length validation added",
  "âœ… Function existence verified before calling",
  "âœ… Variable declared before use",
  "âœ… Method existence checked before calling",
  "âœ… Syntax error fixed - proper bracket matching",
  "âœ… Const variable not reassigned",
  "âœ… Undefined check added before property access",
  "âœ… Recursion base case properly implemented",
  "âœ… Type checking added before conversion",
  "âœ… JSON syntax validated and corrected",
  "âœ… Variable declared before temporal dead zone",
  "âœ… Constructor called with new keyword",
];

function updateConsole() {
  const console = document.getElementById("console");
  const errorCount = Object.values(errors).filter(Boolean).length;

  console.innerHTML = "";

  Object.keys(errors).forEach((key, index) => {
    const errorDiv = document.createElement("div");
    errorDiv.className = `error-item ${errors[key] ? "error" : "solved"}`;

    const numberDiv = document.createElement("div");
    numberDiv.className = "error-number";
    numberDiv.textContent = (index + 1).toString();

    const statusDiv = document.createElement("div");
    statusDiv.className = `status ${errors[key] ? "error" : "solved"}`;

    const textDiv = document.createElement("div");
    textDiv.className = errors[key] ? "error-text" : "solved-text";
    textDiv.textContent = errors[key]
      ? errorMessages[index]
      : solvedMessages[index];

    errorDiv.appendChild(numberDiv);
    errorDiv.appendChild(statusDiv);
    errorDiv.appendChild(textDiv);
    console.appendChild(errorDiv);
  });

  const progress = document.getElementById("progress");
  progress.textContent = `Errors Remaining: ${errorCount} / 15`;
  progress.className = errorCount === 0 ? "progress complete" : "progress";

  if (errorCount === 0) {
    setTimeout(() => {
      alert("ðŸŽ‰ Congratulations! All errors have been fixed!");
    }, 500);
  }
}

function runTests() {
  // Test each error by calling the corresponding function from bugs.js
  for (let i = 1; i <= 15; i++) {
    try {
      // Try to call the test function
      const functionName = `test${i}`;
      if (typeof window[functionName] === "function") {
        window[functionName]();
        errors[`error${i}`] = false;
      } else {
        errors[`error${i}`] = true;
      }
    } catch (e) {
      errors[`error${i}`] = true;
    }
  }

  updateConsole();
}

function resetErrors() {
  // Reset all errors to true (broken state)
  Object.keys(errors).forEach((key) => {
    errors[key] = true;
  });
  updateConsole();
}

// Initialize the console
updateConsole();

// Auto-run tests on load after a short delay
setTimeout(runTests, 1000);
// ==================== END BUG TRACKER FILE ====================
// ==================== DO NOT MODIFY ====================
